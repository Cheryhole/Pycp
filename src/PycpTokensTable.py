# PycpTokensTable.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('AND', 'BREAK', 'COLON', 'COMMA', 'COMMENT', 'CONST', 'CONTINUE', 'DECIMAL', 'DEL', 'DIVIDE', 'DOT', 'ELIF', 'ELSE', 'EQUALS', 'FALSE', 'FOR', 'FUNC', 'IDENTIFIER', 'IF', 'IMPORT', 'IN', 'INTEGER', 'LBRACE', 'LBRACKET', 'LPAREN', 'MINUS', 'MODULO', 'NEW', 'NONE', 'NOT', 'OF', 'OR', 'PASS', 'PLUS', 'RBRACE', 'RBRACKET', 'RETURN', 'RPAREN', 'SEMICOLON', 'STRING', 'TIMES', 'TRUE', 'VAR', 'WHILE'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive', 'multicomment': 'exclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_newline>\\n+)|(?P<t_IDENTIFIER>(?!\\b(?:None|True|False|if|elif|else|while|for|break|continue|func|return|pass|import|new|del|var|const|and|or|not|in|of)\\b)([a-zA-Z_][a-zA-Z0-9_]*))|(?P<t_DECIMAL>\\b(0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+|0[dD][0-9]*\\.[0-9]+|0[oO][0-7]*\\.[0-7]+|0[bB][01]*\\.[01]+|[0-9]*\\.[0-9]+)\\b)|(?P<t_INTEGER>\\b(0[xX][0-9a-fA-F]+|0[dD][0-9]+|0[oO][0-7]+|0[bB][01]+|[1-9][0-9]*|0)\\b)|(?P<t_STRING>\\"(?:\\\\\\"|[^\\"])*\\"|\\\'(?:\\\\\\\'|[^\\\'])*\\\')|(?P<t_CONTINUE>\\bcontinue\\b)|(?P<t_RETURN>\\breturn\\b)|(?P<t_IMPORT>\\bimport\\b)|(?P<t_FALSE>\\bFalse\\b)|(?P<t_WHILE>\\bwhile\\b)|(?P<t_BREAK>\\bbreak\\b)|(?P<t_CONST>\\bconst\\b)|(?P<t_NONE>\\bNone\\b)|(?P<t_TRUE>\\bTrue\\b)|(?P<t_ELIF>\\belif\\b)|(?P<t_ELSE>\\belse\\b)|(?P<t_FUNC>\\bfunc\\b)|(?P<t_PASS>\\bpass\\b)|(?P<t_FOR>\\bfor\\b)|(?P<t_NEW>\\bnew\\b)|(?P<t_DEL>\\bdel\\b)|(?P<t_VAR>\\bvar\\b)|(?P<t_AND>\\band\\b)|(?P<t_NOT>\\bnot\\b)|(?P<t_IF>\\bif\\b)|(?P<t_OR>\\bor\\b)|(?P<t_IN>\\bin\\b)|(?P<t_OF>\\bof\\b)|(?P<t_COMMENT>//.*)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_LBRACKET>\\[)|(?P<t_RBRACKET>\\])|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_COMMA>\\,)|(?P<t_COLON>\\:)|(?P<t_SEMICOLON>\\;)|(?P<t_DOT>\\.)|(?P<t_PLUS>\\+)|(?P<t_MINUS>\\-)|(?P<t_TIMES>\\*)|(?P<t_MODULO>\\%)|(?P<t_DIVIDE>/)|(?P<t_EQUALS>=)', [None, ('t_newline', 'newline'), (None, 'IDENTIFIER'), None, (None, 'DECIMAL'), None, (None, 'INTEGER'), None, (None, 'STRING'), (None, 'CONTINUE'), (None, 'RETURN'), (None, 'IMPORT'), (None, 'FALSE'), (None, 'WHILE'), (None, 'BREAK'), (None, 'CONST'), (None, 'NONE'), (None, 'TRUE'), (None, 'ELIF'), (None, 'ELSE'), (None, 'FUNC'), (None, 'PASS'), (None, 'FOR'), (None, 'NEW'), (None, 'DEL'), (None, 'VAR'), (None, 'AND'), (None, 'NOT'), (None, 'IF'), (None, 'OR'), (None, 'IN'), (None, 'OF'), (None, 'COMMENT'), (None, 'LPAREN'), (None, 'RPAREN'), (None, 'LBRACKET'), (None, 'RBRACKET'), (None, 'LBRACE'), (None, 'RBRACE'), (None, 'COMMA'), (None, 'COLON'), (None, 'SEMICOLON'), (None, 'DOT'), (None, 'PLUS'), (None, 'MINUS'), (None, 'TIMES'), (None, 'MODULO'), (None, 'DIVIDE'), (None, 'EQUALS')])], 'multicomment': [('(?P<t_multicomment_start>/\\*)|(?P<t_multicomment_end>\\*/)', [None, ('t_multicomment_start', 'start'), ('t_multicomment_end', 'end')])]}
_lexstateignore = {'multicomment': ' ', 'INITIAL': ' \t'}
_lexstateerrorf = {'multicomment': 't_multicomment_error', 'INITIAL': 't_error'}
_lexstateeoff = {}
